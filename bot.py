from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters, CallbackQueryHandler
)
from datetime import datetime
import os
from dotenv import load_dotenv

# –°—Ç–∞–Ω–∏ –¥—ñ–∞–ª–æ–≥—É
CHOOSING, BOOK_DATE, BOOK_TIME, GUESTS, CONTACT_NAME, CONTACT_PHONE, SELECT_CABIN = range(7)

# ID –≥—Ä—É–ø–∏ Telegram, –∫—É–¥–∏ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
ADMIN_CHAT_ID = "@gipnoze_lounge_chat"
ADMIN_PHONE = "+380956232134"
ADMIN_USER_ID = 6073809255  # <-- –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram user ID

bookings = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω—å —É –ø–∞–º'—è—Ç—ñ

# –ß–∞—Å–æ–≤—ñ —Å–ª–æ—Ç–∏ –∑ 17:00 –ø–æ 22:30 –∑ –∫—Ä–æ–∫–æ–º 30 —Ö–≤–∏–ª–∏–Ω
time_slots = [f"{h:02d}:{m:02d}" for h in range(17, 23) for m in (0, 30) if not (h == 22 and m > 30)]

CABINS = [
    "–ö–∞–±—ñ–Ω–∫–∞ 1 (5-10 —á–æ–ª.)",
    "–ö–∞–±—ñ–Ω–∫–∞ 2 (–¥–æ 8 —á–æ–ª.)",
    "–ö–∞–±—ñ–Ω–∫–∞ 3 (–¥–æ 6 —á–æ–ª.)",
    "VIP Xbox X (–¥–æ 12 —á–æ–ª.)",
    "VIP PS5 (–¥–æ 12 —á–æ–ª.)",
    "–î–∏–≤–∞–Ω—á–∏–∫–∏ –Ω–∞ –±–∞—Ä—ñ (–¥–æ 6 —á–æ–ª.)",
    "–ë–∞—Ä–Ω–∞ —Å—Ç—ñ–π–∫–∞ (6 –º—ñ—Å—Ü—å)",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 1",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 2",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 3",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 4",
    "–î–æ–¥–∞—Ç–∫–æ–≤–µ –º—ñ—Å—Ü–µ –Ω–∞ 3 —á–æ–ª."
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [["üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫", "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—å"], ["üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (–∞–¥–º—ñ–Ω—É)"]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤ –∫–∞–ª—å—è–Ω–Ω—ñ–π.\n–©–æ –±–∞–∂–∞—î—à –∑—Ä–æ–±–∏—Ç–∏?\n\n–î–ª—è –ø–∏—Ç–∞–Ω—å: " + ADMIN_PHONE,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return CHOOSING

async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    action = update.message.text
    if action == "üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫":
        context.user_data['action'] = action
        await update.message.reply_text("–ù–∞ —è–∫—É –¥–∞—Ç—É –ø–ª–∞–Ω—É—î—à –≤—ñ–∑–∏—Ç? (—Ñ–æ—Ä–º–∞—Ç: 30.07.2025)")
        return BOOK_DATE
    elif action == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—å":
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—å:")
        return CONTACT_NAME
    elif action == "üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (–∞–¥–º—ñ–Ω—É)":
        if update.message.from_user.id == ADMIN_USER_ID:
            if not bookings:
                await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å.")
            else:
                for i, b in enumerate(bookings, 1):
                    await update.message.reply_text(f"#{i}: {b}")
        else:
            await update.message.reply_text("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END

async def book_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        datetime.strptime(text, "%d.%m.%Y")
        context.user_data['date'] = text
    except ValueError:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 30.07.2025")
        return BOOK_DATE

    keyboard = [[InlineKeyboardButton(time, callback_data=time)] for time in time_slots]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û –∫–æ—Ç—Ä—ñ–π –≥–æ–¥–∏–Ω—ñ?", reply_markup=reply_markup)
    return BOOK_TIME

async def book_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['time'] = query.data

    # –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–π–Ω—è—Ç—ñ –∫–∞–±—ñ–Ω–∫–∏ –Ω–∞ –¥–∞—Ç—É + —á–∞—Å
    date = context.user_data['date']
    time = context.user_data['time']
    busy = []
    for b in bookings:
        if f"–î–∞—Ç–∞: {date}" in b and f"–ß–∞—Å: {time}" in b:
            for cabin in CABINS:
                if cabin in b:
                    busy.append(cabin)

    available_cabins = [cabin for cabin in CABINS if cabin not in busy]
    if not available_cabins:
        await query.edit_message_text("–ù–∞ —Ü–µ–π —á–∞—Å —É—Å—ñ –∫–∞–±—ñ–Ω–∫–∏ –∑–∞–π–Ω—è—Ç—ñ. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —á–∞—Å –∞–±–æ –¥–∞—Ç—É.")
        return ConversationHandler.END

    await query.edit_message_text("–°–∫—ñ–ª—å–∫–∏ –æ—Å—ñ–±?")
    return GUESTS

async def guests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['guests'] = update.message.text
    date = context.user_data['date']
    time = context.user_data['time']
    busy = []
    for b in bookings:
        if f"–î–∞—Ç–∞: {date}" in b and f"–ß–∞—Å: {time}" in b:
            for cabin in CABINS:
                if cabin in b:
                    busy.append(cabin)
    available_cabins = [cabin for cabin in CABINS if cabin not in busy]
    keyboard = [[InlineKeyboardButton(cabin, callback_data=cabin)] for cabin in available_cabins]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –∞–±–æ –∑–æ–Ω—É:", reply_markup=reply_markup)
    return SELECT_CABIN

async def select_cabin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['cabin'] = query.data
    await query.edit_message_text("–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
    return CONTACT_NAME

async def contact_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É?")
    return CONTACT_PHONE

async def contact_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['contact'] = update.message.text
    summary = (
        f"üìÖ –ù–æ–≤–∞ –±—Ä–æ–Ω—å:\n"
        f"–Ü–º'—è: {context.user_data['name']}\n"
        f"–¢–∏–ø: {context.user_data.get('action', '‚Äî')}\n"
        f"–î–∞—Ç–∞: {context.user_data['date']}\n"
        f"–ß–∞—Å: {context.user_data['time']}\n"
        f"–ì–æ—Å—Ç–µ–π: {context.user_data['guests']}\n"
        f"–ú—ñ—Å—Ü–µ: {context.user_data['cabin']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['contact']}\n"
        f"–î–ª—è –∑–∞–ø–∏—Ç–∞–Ω—å: {ADMIN_PHONE}"
    )
    bookings.append(summary)
    await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ! –ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ç–≤–æ—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")
    await update.message.reply_text("üì¨ –ú–∏ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ —Ç–µ–±–µ, –∫–æ–ª–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –±—É–¥–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    await context.bot.send_message(chat_id=update.message.chat_id, text=f"üîî –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ! –û—á—ñ–∫—É–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=summary)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

if __name__ == '__main__':
    load_dotenv()
    TOKEN = os.getenv("BOT_TOKEN")

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        CHOOSING: [MessageHandler(filters.TEXT, choose_action)],
        BOOK_DATE: [MessageHandler(filters.TEXT, book_date)],
        BOOK_TIME: [CallbackQueryHandler(book_time)],
        GUESTS: [MessageHandler(filters.TEXT, guests)],
        SELECT_CABIN: [CallbackQueryHandler(select_cabin)],
        CONTACT_NAME: [MessageHandler(filters.TEXT, contact_name)],
        CONTACT_PHONE: [MessageHandler(filters.TEXT, contact_phone)],
    },
    fallbacks=[CommandHandler('cancel', cancel)],
    per_message=True  # <-- –¥–æ–¥–∞–π —Ü–µ–π —Ä—è–¥–æ–∫
)

    app.add_handler(conv_handler)
    import asyncio
    asyncio.run(app.run_polling())