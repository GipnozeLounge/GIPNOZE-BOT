from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters, CallbackQueryHandler
)
from datetime import datetime
import os
from dotenv import load_dotenv

# –°—Ç–∞–Ω–∏ –¥—ñ–∞–ª–æ–≥—É
CHOOSING, BOOK_DATE, BOOK_TIME, GUESTS, CONTACT_NAME, CONTACT_PHONE, SELECT_CABIN, CANCEL_NAME = range(8)

ADMIN_CHAT_ID = "@gipnoze_lounge_chat"
ADMIN_PHONE = "+380956232134"
ADMIN_USER_ID = 6073809255  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram user ID

bookings = []  # –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω—å —É –ø–∞–º'—è—Ç—ñ

time_slots = [f"{h:02d}:{m:02d}" for h in range(17, 23) for m in (0, 30) if not (h == 22 and m > 30)]

CABINS = [
    "–ö–∞–±—ñ–Ω–∫–∞ 1 (5-10 —á–æ–ª.)",
    "–ö–∞–±—ñ–Ω–∫–∞ 2 (–¥–æ 8 —á–æ–ª.)",
    "–ö–∞–±—ñ–Ω–∫–∞ 3 (–¥–æ 6 —á–æ–ª.)",
    "VIP Xbox X (–¥–æ 12 —á–æ–ª.)",
    "VIP PS5 (–¥–æ 12 —á–æ–ª.)",
    "–î–∏–≤–∞–Ω—á–∏–∫–∏ –Ω–∞ –±–∞—Ä—ñ (–¥–æ 6 —á–æ–ª.)",
    "–ë–∞—Ä–Ω–∞ —Å—Ç—ñ–π–∫–∞ (6 –º—ñ—Å—Ü—å)",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 1",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 2",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 3",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 4",
    "–î–æ–¥–∞—Ç–∫–æ–≤–µ –º—ñ—Å—Ü–µ –Ω–∞ 3 —á–æ–ª."
]

user_booking_data = {}  # —Ç–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —é–∑–µ—Ä–∞

# --- –§—É–Ω–∫—Ü—ñ—ó ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [["üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫", "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—å"], ["üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (–∞–¥–º—ñ–Ω—É)"]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤ –∫–∞–ª—å—è–Ω–Ω—ñ–π.\n–©–æ –±–∞–∂–∞—î—à –∑—Ä–æ–±–∏—Ç–∏?\n\n–î–ª—è –ø–∏—Ç–∞–Ω—å: " + ADMIN_PHONE,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    )
    return CHOOSING

async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    action = update.message.text
    user_id = update.message.from_user.id

    if action == "üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫":
        user_booking_data[user_id] = {}
        await update.message.reply_text("–ù–∞ —è–∫—É –¥–∞—Ç—É –ø–ª–∞–Ω—É—î—à –≤—ñ–∑–∏—Ç? (—Ñ–æ—Ä–º–∞—Ç: 30.07.2025)")
        return BOOK_DATE

    elif action == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—å":
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:")
        return CANCEL_NAME

    elif action == "üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (–∞–¥–º—ñ–Ω—É)":
    if user_id == ADMIN_USER_ID:
        active_bookings = [b for b in bookings if b['status'] in ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ']]
        if not active_bookings:
            await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å.")
        else:
            for i, b in enumerate(active_bookings, 1):
                await update.message.reply_text(
                    f"üî¢ #{i}\n"
                    f"üóì {b['date']} ‚è∞ {b['time']}\n"
                    f"üè† {b['cabin']}\n"
                    f"üë§ {b['name']} ({b['contact']})\n"
                    f"üë• –ì–æ—Å—Ç–µ–π: {b['guests']}\n"
                    f"üìå –°—Ç–∞—Ç—É—Å: {b['status']}"
                )
    else:
        await update.message.reply_text("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    return ConversationHandler.END

async def book_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text
    try:
        datetime.strptime(text, "%d.%m.%Y")
        user_booking_data[user_id]['date'] = text
    except ValueError:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 30.07.2025")
        return BOOK_DATE

    keyboard = [[InlineKeyboardButton(time, callback_data=time)] for time in time_slots]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û –∫–æ—Ç—Ä—ñ–π –≥–æ–¥–∏–Ω—ñ?", reply_markup=reply_markup)
    return BOOK_TIME

async def book_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_booking_data[user_id]['time'] = query.data

    date = user_booking_data[user_id]['date']
    time = user_booking_data[user_id]['time']

    busy = [b['cabin'] for b in bookings if b['date'] == date and b['time'] == time and b['status'] in ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ']]
    available_cabins = [cabin for cabin in CABINS if cabin not in busy]

    if not available_cabins:
        await query.edit_message_text("–ù–∞ —Ü–µ–π —á–∞—Å —É—Å—ñ –∫–∞–±—ñ–Ω–∫–∏ –∑–∞–π–Ω—è—Ç—ñ. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —á–∞—Å –∞–±–æ –¥–∞—Ç—É.")
        return ConversationHandler.END

    await query.edit_message_text("–°–∫—ñ–ª—å–∫–∏ –æ—Å—ñ–±?")
    return GUESTS

async def guests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_booking_data[user_id]['guests'] = update.message.text

    date = user_booking_data[user_id]['date']
    time = user_booking_data[user_id]['time']

    busy = [b['cabin'] for b in bookings if b['date'] == date and b['time'] == time and b['status'] in ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ']]
    available_cabins = [cabin for cabin in CABINS if cabin not in busy]

    keyboard = [[InlineKeyboardButton(cabin, callback_data=cabin)] for cabin in available_cabins]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –∞–±–æ –∑–æ–Ω—É:", reply_markup=reply_markup)
    return SELECT_CABIN

async def select_cabin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_booking_data[user_id]['cabin'] = query.data
    await query.edit_message_text("–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
    return CONTACT_NAME

async def contact_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_booking_data[user_id]['name'] = update.message.text
    await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É?")
    return CONTACT_PHONE

async def contact_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_booking_data[user_id]['contact'] = update.message.text
    data = user_booking_data[user_id]

    booking = {
        'user_id': user_id,
        'name': data['name'],
        'date': data['date'],
        'time': data['time'],
        'guests': data['guests'],
        'cabin': data['cabin'],
        'contact': data['contact'],
        'status': '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
        'chat_id': update.message.chat_id
    }
    bookings.append(booking)
    idx = len(bookings) - 1

    await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ! –ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ç–≤–æ—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")
    await update.message.reply_text("üì¨ –ß–µ–∫–∞—î–º–æ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{idx}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{idx}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    await context.bot.send_message(chat_id=ADMIN_USER_ID, text=format_booking_msg(booking), reply_markup=reply_markup)

    return ConversationHandler.END

async def booking_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    action, idx_str = data.split("_")
    idx = int(idx_str)

    booking = bookings[idx]

    if action == "confirm":
        booking['status'] = "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ"

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=(
                f"‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ:\n\n"
                f"–Ü–º'—è: {booking['name']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking['contact']}\n"
                f"–î–∞—Ç–∞: {booking['date']}\n"
                f"–ß–∞—Å: {booking['time']}\n"
                f"–ö–∞–±—ñ–Ω–∫–∞: {booking['cabin']}\n"
                f"–ì–æ—Å—Ç–µ–π: {booking['guests']}"
            )
        )

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await context.bot.send_message(chat_id=booking['chat_id'], text="‚úÖ –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
        await query.edit_message_text(f"‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ:\n\n{format_booking_msg(booking)}")

    elif action == "reject":
        booking['status'] = "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ"

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await context.bot.send_message(chat_id=booking['chat_id'], text="‚ùå –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
        await query.edit_message_text(f"‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ:\n\n{format_booking_msg(booking)}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

async def cancel_booking_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.text.strip()
    canceled = False
    for b in bookings:
        if b['user_id'] == user_id and b['status'] in ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ']:
            b['status'] = '–°–∫–∞—Å–æ–≤–∞–Ω–æ'
            canceled = True
            await update.message.reply_text(f"‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–ª—è {b['name']} –Ω–∞ {b['date']} –æ {b['time']} —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
            await context.bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {b['name']} —Å–∫–∞—Å—É–≤–∞–≤ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ {b['date']} –æ {b['time']}."
            )
            break

    if not canceled:
        await update.message.reply_text("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ —Å–∫–∞—Å–æ–≤–∞–Ω–µ.")

    return ConversationHandler.END

def format_booking_msg(booking):
    return (
        f"üìÖ –ù–æ–≤–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:\n"
        f"–Ü–º'—è: {booking['name']}\n"
        f"–î–∞—Ç–∞: {booking['date']}\n"
        f"–ß–∞—Å: {booking['time']}\n"
        f"–ì–æ—Å—Ç–µ–π: {booking['guests']}\n"
        f"–ú—ñ—Å—Ü–µ: {booking['cabin']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking['contact']}\n"
        f"–°—Ç–∞—Ç—É—Å: {booking['status']}"
    )

if __name__ == '__main__':
    load_dotenv()
    TOKEN = os.getenv("BOT_TOKEN")

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_action)],
            BOOK_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, book_date)],
            BOOK_TIME: [CallbackQueryHandler(book_time)],
            GUESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, guests)],
            SELECT_CABIN: [CallbackQueryHandler(select_cabin)],
            CONTACT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, contact_name)],
            CONTACT_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, contact_phone)],
            CANCEL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, cancel_booking_name)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True,
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(booking_callback, pattern=r"^(confirm|reject)_\d+"))

    import asyncio
    asyncio.run(app.run_polling())
