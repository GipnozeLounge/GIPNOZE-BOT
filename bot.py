from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters, CallbackQueryHandler
)
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
import sqlite3 # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ SQLite

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É .env
load_dotenv()

# –°—Ç–∞–Ω–∏ –¥—ñ–∞–ª–æ–≥—É –¥–ª—è ConversationHandler
CHOOSING_MAIN_ACTION, BOOK_DATE, BOOK_TIME, GUESTS, SELECT_CABIN, CONTACT_NAME, CONTACT_PHONE, CANCEL_PROMPT, ADMIN_VIEW_DATE = range(9)

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–∞ ID –≥—Ä—É–ø–∏ –∑ .env —Ñ–∞–π–ª—É
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID")) # –í–∞—à Telegram user ID (—á–∏—Å–ª–æ–≤–∏–π)
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID") # Username –≥—Ä—É–ø–∏ –∞–±–æ ID —á–∞—Ç—É –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
ADMIN_PHONE = "+380956232134" # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É

# –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
DB_NAME = 'bookings.db'

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —á–∞—Å–æ–≤–∏—Ö —Å–ª–æ—Ç—ñ–≤ –∑ 17:00 –¥–æ 22:30 –≤–∫–ª—é—á–Ω–æ, –∑ –∫—Ä–æ–∫–æ–º 30 —Ö–≤–∏–ª–∏–Ω
time_slots = []
for h in range(17, 23): # –ì–æ–¥–∏–Ω–∏ –≤—ñ–¥ 17 –¥–æ 22
    for m in (0, 30): # –•–≤–∏–ª–∏–Ω–∏ 0 –∞–±–æ 30
        time_slots.append(f"{h:02d}:{m:02d}")

CABINS = [
    "–ö–∞–±—ñ–Ω–∫–∞ 1 (5-10 —á–æ–ª.)",
    "–ö–∞–±—ñ–Ω–∫–∞ 2 (–¥–æ 8 —á–æ–ª.)",
    "–ö–∞–±—ñ–Ω–∫–∞ 3 (–¥–æ 6 —á–æ–ª.)",
    "VIP Xbox X (–¥–æ 12 —á–æ–ª.)",
    "VIP PS5 (–¥–æ 12 —á–æ–ª.)",
    "–î–∏–≤–∞–Ω—á–∏–∫–∏ –Ω–∞ –±–∞—Ä—ñ (–¥–æ 6 —á–æ–ª.)",
    "–ë–∞—Ä–Ω–∞ —Å—Ç—ñ–π–∫–∞ (6 –º—ñ—Å—Ü—å)",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 1",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 2",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 3",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 4",
    "–î–æ–¥–∞—Ç–∫–æ–≤–µ –º—ñ—Å—Ü–µ –Ω–∞ 3 —á–æ–ª."
]

# –¢–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_booking_data = {}

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö ---

def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–∞–∑—É –¥–∞–Ω–∏—Ö, —Å—Ç–≤–æ—Ä—é—é—á–∏ —Ç–∞–±–ª–∏—Ü—é 'bookings', —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            date TEXT NOT NULL,
            time TEXT NOT NULL,
            guests INTEGER NOT NULL,
            cabin TEXT NOT NULL,
            contact TEXT NOT NULL,
            status TEXT NOT NULL,
            chat_id INTEGER NOT NULL
        )
    ''')
    conn.commit()
    conn.close()
    print("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.")

def get_bookings_from_db(filters=None):
    """–û—Ç—Ä–∏–º—É—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    query = "SELECT id, user_id, name, date, time, guests, cabin, contact, status, chat_id FROM bookings"
    params = []
    where_clauses = []

    if filters:
        if 'user_id' in filters:
            where_clauses.append("user_id = ?")
            params.append(filters['user_id'])
        if 'status' in filters:
            # –û–±—Ä–æ–±–∫–∞ —Å–ø–∏—Å–∫—É —Å—Ç–∞—Ç—É—Å—ñ–≤
            if isinstance(filters['status'], list):
                status_placeholders = ','.join(['?' for _ in filters['status']])
                where_clauses.append(f"status IN ({status_placeholders})")
                params.extend(filters['status'])
            else:
                where_clauses.append("status = ?")
                params.append(filters['status'])
        if 'date' in filters:
            where_clauses.append("date = ?")
            params.append(filters['date'])
        if 'time' in filters:
            where_clauses.append("time = ?")
            params.append(filters['time'])
        if 'cabin' in filters:
            where_clauses.append("cabin = ?")
            params.append(filters['cabin'])


    if where_clauses:
        query += " WHERE " + " AND ".join(where_clauses)

    cursor.execute(query, params)
    rows = cursor.fetchall()
    conn.close()

    bookings_list = []
    for row in rows:
        booking = {
            'id': row[0],
            'user_id': row[1],
            'name': row[2],
            'date': row[3],
            'time': row[4],
            'guests': row[5],
            'cabin': row[6],
            'contact': row[7],
            'status': row[8],
            'chat_id': row[9]
        }
        bookings_list.append(booking)
    return bookings_list

def add_booking_to_db(booking_data):
    """–î–æ–¥–∞—î –Ω–æ–≤–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO bookings (user_id, name, date, time, guests, cabin, contact, status, chat_id)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        booking_data['user_id'],
        booking_data['name'],
        booking_data['date'],
        booking_data['time'],
        booking_data['guests'],
        booking_data['cabin'],
        booking_data['contact'],
        booking_data['status'],
        booking_data['chat_id']
    ))
    booking_id = cursor.lastrowid # –û—Ç—Ä–∏–º—É—î–º–æ ID —â–æ–π–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É
    conn.commit()
    conn.close()
    return booking_id

def update_booking_status_in_db(booking_id, new_status):
    """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∑–∞ ID."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE bookings SET status = ? WHERE id = ?
    ''', (new_status, booking_id))
    conn.commit()
    conn.close()

def get_booking_by_id(booking_id):
    """–û—Ç—Ä–∏–º—É—î –æ–¥–Ω–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–∞ –π–æ–≥–æ ID."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT id, user_id, name, date, time, guests, cabin, contact, status, chat_id FROM bookings WHERE id = ?
    ''', (booking_id,))
    row = cursor.fetchone()
    conn.close()
    if row:
        return {
            'id': row[0],
            'user_id': row[1],
            'name': row[2],
            'date': row[3],
            'time': row[4],
            'guests': row[5],
            'cabin': row[6],
            'contact': row[7],
            'status': row[8],
            'chat_id': row[9]
        }
    return None

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---

def format_booking_msg(booking):
    """–§–æ—Ä–º–∞—Ç—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏."""
    return (
        f"üìÖ –ù–æ–≤–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:\n"
        f"–Ü–º'—è: {booking['name']}\n"
        f"–î–∞—Ç–∞: {booking['date']}\n"
        f"–ß–∞—Å: {booking['time']}\n"
        f"–ì–æ—Å—Ç–µ–π: {booking['guests']}\n"
        f"–ú—ñ—Å—Ü–µ: {booking['cabin']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking['contact']}\n"
        f"–°—Ç–∞—Ç—É—Å: {booking['status']}"
    )

def get_main_keyboard():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É."""
    return ReplyKeyboardMarkup(
        [
            ["üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫", "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—å"],
            ["üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (–∞–¥–º—ñ–Ω—É)", "üì∏ Instagram"],
            ["üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º"]
        ],
        resize_keyboard=True
    )

# --- –§—É–Ω–∫—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤ –∫–∞–ª—å—è–Ω–Ω—ñ–π.\n–©–æ –±–∞–∂–∞—î—à –∑—Ä–æ–±–∏—Ç–∏?\n\n–î–ª—è –ø–∏—Ç–∞–Ω—å: " + ADMIN_PHONE,
        reply_markup=get_main_keyboard()
    )
    return CHOOSING_MAIN_ACTION

async def handle_main_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (ReplyKeyboardMarkup)."""
    text = update.message.text
    user_id = update.message.from_user.id

    if text == "üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫":
        user_booking_data[user_id] = {} # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
        await update.message.reply_text("–ù–∞ —è–∫—É –¥–∞—Ç—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 30.07.2025)")
        return BOOK_DATE
    elif text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—å":
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î
        user_active_bookings = get_bookings_from_db(filters={'user_id': user_id, 'status': ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ']})

        if not user_active_bookings:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.", reply_markup=get_main_keyboard()) # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
            return CHOOSING_MAIN_ACTION

        keyboard = []
        for booking in user_active_bookings:
            keyboard.append([InlineKeyboardButton(
                f"–°–∫–∞—Å—É–≤–∞—Ç–∏: {booking['date']} {booking['time']} - {booking['cabin']}",
                callback_data=f"cancel_booking_{booking['id']}" # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID –∑ –ë–î
            )])
        keyboard.append([InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, —è–∫–µ –±–∞–∂–∞—î—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏:", reply_markup=reply_markup)
        return CANCEL_PROMPT # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    elif text == "üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (–∞–¥–º—ñ–Ω—É)":
        if user_id == ADMIN_USER_ID:
            await update.message.reply_text("–ù–∞ —è–∫—É –¥–∞—Ç—É –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 30.07.2025)")
            return ADMIN_VIEW_DATE
        else:
            await update.message.reply_text("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_main_keyboard())
            return CHOOSING_MAIN_ACTION
    elif text == "üì∏ Instagram":
        instagram_url = "https://www.instagram.com/gipnoze_lounge?utm_source=ig_web_button_share_sheet&igsh=ZDNlZDc0MzIxNw=="
        await update.message.reply_text(f"–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É Instagram: {instagram_url}", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION
    elif text == "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º":
        await update.message.reply_text(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {ADMIN_PHONE}", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION

async def book_date_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""
    user_id = update.message.from_user.id
    date_text = update.message.text

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏ —Ç–∞ —ó—ó –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—ñ (–Ω–µ —Ä–∞–Ω—ñ—à–µ —Å—å–æ–≥–æ–¥–Ω—ñ)
        booking_date = datetime.strptime(date_text, "%d.%m.%Y").date()
        today = datetime.now().date()
        if booking_date < today:
            await update.message.reply_text("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫ –Ω–∞ –º–∏–Ω—É–ª—É –¥–∞—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É –¥–∞—Ç—É.")
            return BOOK_DATE

        user_booking_data[user_id]['date'] = date_text

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ —á–∞—Å–æ–≤–∏–º–∏ —Å–ª–æ—Ç–∞–º–∏
        keyboard = []
        # –†–æ–∑–±–∏–≤–∞—î–º–æ —Å–ª–æ—Ç–∏ –Ω–∞ —Ä—è–¥–∏ –ø–æ 4 –∫–Ω–æ–ø–∫–∏
        for i in range(0, len(time_slots), 4):
            row = []
            for slot in time_slots[i:i+4]:
                row.append(InlineKeyboardButton(slot, callback_data=f"time_{slot}"))
            keyboard.append(row)

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:", reply_markup=reply_markup)
        return BOOK_TIME
    except ValueError:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 30.07.2025).")
        return BOOK_DATE

async def book_time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —á–∞—Å—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""
    query = update.callback_query
    await query.answer() # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback query

    user_id = query.from_user.id
    selected_time = query.data.split("_")[1]
    user_booking_data[user_id]['time'] = selected_time

    date = user_booking_data[user_id]['date']
    time = user_booking_data[user_id]['time']

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–π–Ω—è—Ç—ñ –∫–∞–±—ñ–Ω–∫–∏ –∑ –ë–î
    busy = [b['cabin'] for b in get_bookings_from_db(filters={'date': date, 'time': time, 'status': ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ']})]
    available_cabins = [cabin for cabin in CABINS if cabin not in busy]

    if not available_cabins:
        await query.edit_message_text("–ù–∞ —Ü–µ–π —á–∞—Å —É—Å—ñ –∫–∞–±—ñ–Ω–∫–∏ –∑–∞–π–Ω—è—Ç—ñ. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —á–∞—Å –∞–±–æ –¥–∞—Ç—É.")
        await query.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —á–∞—Å –∞–±–æ –¥–∞—Ç—É –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION

    await query.edit_message_text("–°–∫—ñ–ª—å–∫–∏ –æ—Å—ñ–±?")
    return GUESTS

async def guests_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥–æ—Å—Ç–µ–π."""
    user_id = update.message.from_user.id
    guests_text = update.message.text

    try:
        num_guests = int(guests_text)
        if num_guests <= 0:
            await update.message.reply_text("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ—Å—Ç–µ–π –º–∞—î –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —á–∏—Å–ª–æ–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å.")
            return GUESTS
        user_booking_data[user_id]['guests'] = num_guests
    except ValueError:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ—Å—Ç–µ–π —á–∏—Å–ª–æ–º.")
        return GUESTS

    date = user_booking_data[user_id]['date']
    time = user_booking_data[user_id]['time']

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞–π–Ω—è—Ç—ñ –∫–∞–±—ñ–Ω–∫–∏ –∑ –ë–î
    busy = [b['cabin'] for b in get_bookings_from_db(filters={'date': date, 'time': time, 'status': ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ']})]
    available_cabins = [cabin for cabin in CABINS if cabin not in busy]

    if not available_cabins:
        await update.message.reply_text("–ù–∞ –∂–∞–ª—å, –ø–æ–∫–∏ –≤–∏ –≤–≤–æ–¥–∏–ª–∏ –¥–∞–Ω—ñ, –≤—Å—ñ –∫–∞–±—ñ–Ω–∫–∏ –Ω–∞ —Ü–µ–π —á–∞—Å —Å—Ç–∞–ª–∏ –∑–∞–π–Ω—è—Ç–∏–º–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —á–∞—Å –∞–±–æ –¥–∞—Ç—É.")
        await update.message.reply_text("–ü–æ–≤–µ—Ä—Ç–∞—é –≤–∞—Å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION

    keyboard = [[InlineKeyboardButton(cabin, callback_data=f"cabin_{cabin}")] for cabin in available_cabins]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –∞–±–æ –∑–æ–Ω—É:", reply_markup=reply_markup)
    return SELECT_CABIN

async def select_cabin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫–∞–±—ñ–Ω–∫–∏."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    selected_cabin = query.data.split("_")[1] # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –∫–∞–±—ñ–Ω–∫–∏ –∑ callback_data
    user_booking_data[user_id]['cabin'] = selected_cabin
    await query.edit_message_text("–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
    return CONTACT_NAME

async def contact_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—É."""
    user_id = update.message.from_user.id
    user_booking_data[user_id]['name'] = update.message.text
    await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, +380991234567)")
    return CONTACT_PHONE

async def contact_phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""
    user_id = update.message.from_user.id
    user_data = user_booking_data[user_id]
    user_data['contact'] = update.message.text

    booking_to_save = {
        'user_id': user_id,
        'name': user_data['name'],
        'date': user_data['date'],
        'time': user_data['time'],
        'guests': user_data['guests'],
        'cabin': user_data['cabin'],
        'contact': user_data['contact'],
        'status': '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
        'chat_id': update.message.chat_id
    }
    
    # –î–æ–¥–∞—î–º–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–æ –ë–î
    booking_id = add_booking_to_db(booking_to_save)
    booking_to_save['id'] = booking_id # –î–æ–¥–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–∏–π ID –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è

    await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ! –ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ç–≤–æ—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")
    await update.message.reply_text("üì¨ –ß–µ–∫–∞—î–º–æ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"admin_confirm_{booking_id}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"admin_reject_{booking_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    try:
        await context.bot.send_message(chat_id=ADMIN_USER_ID, text=format_booking_msg(booking_to_save), reply_markup=reply_markup)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É ({ADMIN_USER_ID}): {e}")
        await update.message.reply_text(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º {ADMIN_PHONE}. –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {e}")

    await update.message.reply_text("–©–æ—Å—å —â–µ?", reply_markup=get_main_keyboard())
    return ConversationHandler.END

async def admin_booking_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è)."""
    query = update.callback_query
    await query.answer()

    print(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞. –î–∞–Ω—ñ: {query.data}, –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {query.from_user.id}")

    data = query.data
    parts = data.split("_")
    if len(parts) != 3 or parts[0] != "admin":
        print(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–∏—Ö –¥–ª—è –∞–¥–º—ñ–Ω–∞: {data}")
        await query.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.")
        return

    action_type = parts[1]
    booking_id = int(parts[2]) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID –∑ –ë–î

    booking = get_booking_by_id(booking_id) # –û—Ç—Ä–∏–º—É—î–º–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑ –ë–î –∑–∞ ID

    if not booking:
        await query.edit_message_text("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        return

    if query.from_user.id != ADMIN_USER_ID:
        print(f"–°–ø—Ä–æ–±–∞ –Ω–µ—Å–∞–Ω–∫—Ü—ñ–æ–Ω–æ–≤–∞–Ω–æ—ó –¥—ñ—ó –≤—ñ–¥ {query.from_user.id}. –û—á—ñ–∫—É—î—Ç—å—Å—è {ADMIN_USER_ID}.")
        await query.edit_message_text("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    if booking['status'] not in ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è']:
        await query.edit_message_text(f"–¶—è –±—Ä–æ–Ω—å –≤–∂–µ '{booking['status']}'.")
        return

    if action_type == "confirm":
        update_booking_status_in_db(booking_id, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ") # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —É –ë–î
        booking['status'] = "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ" # –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è

        print(f"DEBUG: Booking object before sending to group: {booking}")

        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=(
                    f"‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ:\n\n"
                    f"–Ü–º'—è: {booking['name']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking['contact']}\n"
                    f"–î–∞—Ç–∞: {booking['date']}\n"
                    f"–ß–∞—Å: {booking['time']}\n"
                    f"–ö–∞–±—ñ–Ω–∫–∞: {booking['cabin']}\n"
                    f"–ì–æ—Å—Ç–µ–π: {booking['guests']}"
                )
            )
            print(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –≥—Ä—É–ø—É: {ADMIN_CHAT_ID}")
        except Exception as e:
            print(f"–ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É {ADMIN_CHAT_ID}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –±–æ—Ç —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–∏ —Ç–∞ —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID/username. –î–µ—Ç–∞–ª—ñ: {e}")
            await query.message.reply_text(f"–ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ–∑–≤–æ–ª–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø—ñ –∞–±–æ ID –≥—Ä—É–ø–∏. –î–µ—Ç–∞–ª—ñ: {e}")

        try:
            await context.bot.send_message(chat_id=booking['chat_id'], text="‚úÖ –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {booking['chat_id']} –ø—Ä–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {e}")

        await query.edit_message_text(f"‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ:\n\n{format_booking_msg(booking)}")

    elif action_type == "reject":
        update_booking_status_in_db(booking_id, "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ") # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —É –ë–î
        booking['status'] = "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ" # –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è

        try:
            await context.bot.send_message(chat_id=booking['chat_id'], text="‚ùå –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {booking['chat_id']} –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {e}")

        await query.edit_message_text(f"‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ:\n\n{format_booking_msg(booking)}")

async def admin_view_date_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –±—Ä–æ–Ω—é–≤–∞–Ω—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    user_id = update.message.from_user.id
    date_text = update.message.text

    try:
        datetime.strptime(date_text, "%d.%m.%Y").date()
        context.user_data['admin_view_date'] = date_text

        # –û—Ç—Ä–∏–º—É—î–º–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –¥–∞—Ç—É –∑ –ë–î
        bookings_for_date = get_bookings_from_db(filters={'date': date_text, 'status': ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ']})

        if not bookings_for_date:
            await update.message.reply_text(f"–ù–∞ {date_text} –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å.", reply_markup=get_main_keyboard())
        else:
            await update.message.reply_text(f"–û—Å—å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ {date_text}:")
            for i, b in enumerate(bookings_for_date, 1):
                keyboard = [
                    [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ü—é –±—Ä–æ–Ω—å", callback_data=f"admin_force_cancel_{b['id']}")] # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID –∑ –ë–î
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                    f"üî¢ #{i}\n"
                    f"üìÖ –î–∞—Ç–∞: {b['date']}\n"
                    f"‚è∞ –ß–∞—Å: {b['time']}\n"
                    f"üè† –ö–∞–±—ñ–Ω–∫–∞: {b['cabin']}\n"
                    f"üë§ {b['name']} ({b['contact']})\n"
                    f"üë• –ì–æ—Å—Ç–µ–π: {b['guests']}\n"
                    f"üìå –°—Ç–∞—Ç—É—Å: {b['status']}",
                    reply_markup=reply_markup
                )
            await update.message.reply_text("–©–æ—Å—å —â–µ?", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION
    except ValueError:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 30.07.2025).")
        return ADMIN_VIEW_DATE

async def admin_force_cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data
    
    print(f"DEBUG (Admin Force Cancel): Received callback data: {data} from user {user_id}")

    if user_id != ADMIN_USER_ID:
        await query.edit_message_text("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    action, idx_str = data.split("_", 2)
    booking_id = int(idx_str) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID –∑ –ë–î

    booking_to_cancel = get_booking_by_id(booking_id) # –û—Ç—Ä–∏–º—É—î–º–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑ –ë–î

    print(f"DEBUG (Admin Force Cancel): Attempting to cancel booking with ID: {booking_id}. Found booking: {booking_to_cancel}")

    if not booking_to_cancel:
        await query.edit_message_text("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        return

    if booking_to_cancel['status'] in ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ']:
        update_booking_status_in_db(booking_id, '–°–∫–∞—Å–æ–≤–∞–Ω–æ (–∞–¥–º—ñ–Ω–æ–º)') # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —É –ë–î
        booking_to_cancel['status'] = '–°–∫–∞—Å–æ–≤–∞–Ω–æ (–∞–¥–º—ñ–Ω–æ–º)' # –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç

        await query.edit_message_text(f"‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ {booking_to_cancel['date']} –æ {booking_to_cancel['time']} –¥–ª—è {booking_to_cancel['name']} —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

        try:
            await context.bot.send_message(
                chat_id=booking_to_cancel['chat_id'],
                text=f"‚ùå –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ {booking_to_cancel['date']} –æ {booking_to_cancel['time']} (–ö–∞–±—ñ–Ω–∫–∞: {booking_to_cancel['cabin']}) –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–ª—è —É—Ç–æ—á–Ω–µ–Ω—å –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑–∞ –Ω–æ–º–µ—Ä–æ–º {ADMIN_PHONE}."
            )
            print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {booking_to_cancel['chat_id']} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—ñ –∞–¥–º—ñ–Ω–æ–º.")
        except Exception as e:
            print(f"–ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—ñ –∞–¥–º—ñ–Ω–æ–º: {e}")

        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"‚ùå –ê–¥–º—ñ–Ω {query.from_user.first_name} —Å–∫–∞—Å—É–≤–∞–≤ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è: {booking_to_cancel['name']} –Ω–∞ {booking_to_cancel['date']} –æ {booking_to_cancel['time']} (–ö–∞–±—ñ–Ω–∫–∞: {booking_to_cancel['cabin']})."
            )
            print(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—ñ –∞–¥–º—ñ–Ω–æ–º —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
        except Exception as e:
            print(f"–ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—ñ –∞–¥–º—ñ–Ω–æ–º: {e}")
    else:
        await query.edit_message_text("–¶—è –±—Ä–æ–Ω—å –≤–∂–µ –Ω–µ —î –∞–∫—Ç–∏–≤–Ω–æ—é –∞–±–æ –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞ —Ä–∞–Ω—ñ—à–µ.")
    
    await query.message.reply_text("–©–æ—Å—å —â–µ?", reply_markup=get_main_keyboard())
    return CHOOSING_MAIN_ACTION


async def cancel_booking_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data

    print(f"DEBUG (User Cancel): Received callback data: {data} from user {user_id}") # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ

    if data == "back_to_main":
        await query.edit_message_text("–ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION

    action, idx_str = data.split("_", 1)
    booking_id = int(idx_str) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID –∑ –ë–î

    booking_to_cancel = get_booking_by_id(booking_id) # –û—Ç—Ä–∏–º—É—î–º–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑ –ë–î

    print(f"DEBUG (User Cancel): Attempting to cancel booking with ID: {booking_id}. Found booking: {booking_to_cancel}") # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: —á–∏ –∑–Ω–∞–π–¥–µ–Ω–æ –±—Ä–æ–Ω—å

    if not booking_to_cancel:
        await query.edit_message_text("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        await query.message.reply_text("–©–æ—Å—å —â–µ?", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION

    print(f"DEBUG (User Cancel): Checking user ID match. Callback user: {user_id}, Booking user: {booking_to_cancel['user_id']}") # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if booking_to_cancel['user_id'] != user_id:
        await query.edit_message_text("–í–∏ –º–æ–∂–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ª–∏—à–µ –≤–ª–∞—Å–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")
        await query.message.reply_text("–©–æ—Å—å —â–µ?", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION

    print(f"DEBUG (User Cancel): Checking booking status: {booking_to_cancel['status']}") # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω—ñ
    if booking_to_cancel['status'] in ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ']:
        update_booking_status_in_db(booking_id, '–°–∫–∞—Å–æ–≤–∞–Ω–æ') # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —É –ë–î
        booking_to_cancel['status'] = '–°–∫–∞—Å–æ–≤–∞–Ω–æ' # –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç

        await query.edit_message_text(f"‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ {booking_to_cancel['date']} –æ {booking_to_cancel['time']} —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

        try:
            await context.bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {booking_to_cancel['name']} —Å–∫–∞—Å—É–≤–∞–≤ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ {booking_to_cancel['date']} –æ {booking_to_cancel['time']} (–ö–∞–±—ñ–Ω–∫–∞: {booking_to_cancel['cabin']})."
            )
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: {e}")
    else:
        await query.edit_message_text("–¶–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤–∂–µ –Ω–µ —î –∞–∫—Ç–∏–≤–Ω–∏–º.")

    await query.message.reply_text("–©–æ—Å—å —â–µ?", reply_markup=get_main_keyboard())
    return CHOOSING_MAIN_ACTION

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /cancel –¥–ª—è –≤–∏—Ö–æ–¥—É –∑ –±—É–¥—å-—è–∫–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É."""
    await update.message.reply_text("–î—ñ–∞–ª–æ–≥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
    return ConversationHandler.END

async def fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
    await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è /start.", reply_markup=get_main_keyboard())
    return CHOOSING_MAIN_ACTION # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Å—Ç–∞–Ω—É

# --- –û—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∏ ---

if __name__ == '__main__':
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ–∞–π–ª—ñ .env")
    if not ADMIN_USER_ID or not ADMIN_CHAT_ID:
        raise ValueError("ADMIN_USER_ID –∞–±–æ ADMIN_CHAT_ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ–∞–π–ª—ñ .env")

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
    init_db()

    app = ApplicationBuilder().token(TOKEN).build()

    # ConversationHandler –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥—ñ–∞–ª–æ–≥—ñ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_MAIN_ACTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu_choice),
            ],
            BOOK_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, book_date_handler)],
            BOOK_TIME: [CallbackQueryHandler(book_time_handler, pattern=r"^time_")],
            GUESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, guests_handler)],
            SELECT_CABIN: [CallbackQueryHandler(select_cabin_handler, pattern=r"^cabin_")],
            CONTACT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, contact_name_handler)],
            CONTACT_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, contact_phone_handler)],
            CANCEL_PROMPT: [CallbackQueryHandler(cancel_booking_callback, pattern=r"^(cancel_booking_|back_to_main)")],
            ADMIN_VIEW_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_view_date_handler)], # –ù–æ–≤–∏–π —Å—Ç–∞–Ω –¥–ª—è –∞–¥–º—ñ–Ω–∞
        },
        fallbacks=[CommandHandler('cancel', cancel_conversation), MessageHandler(filters.ALL, fallback_handler)],
        allow_reentry=True, # –î–æ–∑–≤–æ–ª—è—î –ø–æ–≤—Ç–æ—Ä–Ω–∏–π –≤—Ö—ñ–¥ —É –¥—ñ–∞–ª–æ–≥
    )

    app.add_handler(conv_handler)
    # –û–∫—Ä–µ–º–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è callback-–∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è)
    app.add_handler(CallbackQueryHandler(admin_booking_callback, pattern=r"^(admin_confirm_|admin_reject_)"))
    # –ù–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω–æ–º
    app.add_handler(CallbackQueryHandler(admin_force_cancel_booking, pattern=r"^admin_force_cancel_"))

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    app.run_polling()
