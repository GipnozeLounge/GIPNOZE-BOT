from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters, CallbackQueryHandler
)
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É .env
load_dotenv()

# –°—Ç–∞–Ω–∏ –¥—ñ–∞–ª–æ–≥—É –¥–ª—è ConversationHandler
CHOOSING_MAIN_ACTION, BOOK_DATE, BOOK_TIME, GUESTS, SELECT_CABIN, CONTACT_NAME, CONTACT_PHONE, CANCEL_PROMPT, CANCEL_CONFIRM = range(9)

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–∞ ID –≥—Ä—É–ø–∏ –∑ .env —Ñ–∞–π–ª—É
# –¶–µ –±–µ–∑–ø–µ—á–Ω—ñ—à–µ, –Ω—ñ–∂ —Ö–∞—Ä–¥–∫–æ–¥–∏—Ç–∏ —ó—Ö —É –∫–æ–¥—ñ
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID")) # –í–∞—à Telegram user ID (—á–∏—Å–ª–æ–≤–∏–π)
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID") # Username –≥—Ä—É–ø–∏ –∞–±–æ ID —á–∞—Ç—É –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "@gipnoze_lounge_chat" –∞–±–æ —á–∏—Å–ª–æ–≤–∏–π ID)
ADMIN_PHONE = "+380956232134" # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω—å —É –ø–∞–º'—è—Ç—ñ.
# –£–≤–∞–≥–∞: –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –≤—Å—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –≤—Ç—Ä–∞—á–µ–Ω—ñ!
# –î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω-–≤–µ—Ä—Å—ñ—ó —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, SQLite, PostgreSQL, Firestore).
bookings = []

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —á–∞—Å–æ–≤–∏—Ö —Å–ª–æ—Ç—ñ–≤ –∑ 17:00 –¥–æ 22:30 –≤–∫–ª—é—á–Ω–æ, –∑ –∫—Ä–æ–∫–æ–º 30 —Ö–≤–∏–ª–∏–Ω
time_slots = []
for h in range(17, 23): # –ì–æ–¥–∏–Ω–∏ –≤—ñ–¥ 17 –¥–æ 22
    for m in (0, 30): # –•–≤–∏–ª–∏–Ω–∏ 0 –∞–±–æ 30
        time_slots.append(f"{h:02d}:{m:02d}")

CABINS = [
    "–ö–∞–±—ñ–Ω–∫–∞ 1 (5-10 —á–æ–ª.)",
    "–ö–∞–±—ñ–Ω–∫–∞ 2 (–¥–æ 8 —á–æ–ª.)",
    "–ö–∞–±—ñ–Ω–∫–∞ 3 (–¥–æ 6 —á–æ–ª.)",
    "VIP Xbox X (–¥–æ 12 —á–æ–ª.)",
    "VIP PS5 (–¥–æ 12 —á–æ–ª.)",
    "–î–∏–≤–∞–Ω—á–∏–∫–∏ –Ω–∞ –±–∞—Ä—ñ (–¥–æ 6 —á–æ–ª.)",
    "–ë–∞—Ä–Ω–∞ —Å—Ç—ñ–π–∫–∞ (6 –º—ñ—Å—Ü—å)",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 1",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 2",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 3",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 4",
    "–î–æ–¥–∞—Ç–∫–æ–≤–µ –º—ñ—Å—Ü–µ –Ω–∞ 3 —á–æ–ª."
]

# –¢–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_booking_data = {}

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---

def format_booking_msg(booking):
    """–§–æ—Ä–º–∞—Ç—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏."""
    return (
        f"üìÖ –ù–æ–≤–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:\n"
        f"–Ü–º'—è: {booking['name']}\n"
        f"–î–∞—Ç–∞: {booking['date']}\n"
        f"–ß–∞—Å: {booking['time']}\n"
        f"–ì–æ—Å—Ç–µ–π: {booking['guests']}\n"
        f"–ú—ñ—Å—Ü–µ: {booking['cabin']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking['contact']}\n"
        f"–°—Ç–∞—Ç—É—Å: {booking['status']}"
    )

def get_main_keyboard():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É."""
    return ReplyKeyboardMarkup(
        [["üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫", "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—å"], ["üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (–∞–¥–º—ñ–Ω—É)"]],
        resize_keyboard=True
    )

# --- –§—É–Ω–∫—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤ –∫–∞–ª—å—è–Ω–Ω—ñ–π.\n–©–æ –±–∞–∂–∞—î—à –∑—Ä–æ–±–∏—Ç–∏?\n\n–î–ª—è –ø–∏—Ç–∞–Ω—å: " + ADMIN_PHONE,
        reply_markup=get_main_keyboard()
    )
    return CHOOSING_MAIN_ACTION

async def handle_main_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (ReplyKeyboardMarkup)."""
    text = update.message.text
    user_id = update.message.from_user.id

    if text == "üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫":
        user_booking_data[user_id] = {} # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
        await update.message.reply_text("–ù–∞ —è–∫—É –¥–∞—Ç—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 30.07.2025)")
        return BOOK_DATE
    elif text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—å":
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–∫—Ç–∏–≤–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
        user_active_bookings = [
            b for b in bookings
            if b['user_id'] == user_id and b['status'] in ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ']
        ]
        if not user_active_bookings:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
            return CHOOSING_MAIN_ACTION

        keyboard = []
        for i, booking in enumerate(user_active_bookings):
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤ –∑–∞–≥–∞–ª—å–Ω–æ–º—É —Å–ø–∏—Å–∫—É bookings
            original_idx = bookings.index(booking)
            keyboard.append([InlineKeyboardButton(
                f"–°–∫–∞—Å—É–≤–∞—Ç–∏: {booking['date']} {booking['time']} - {booking['cabin']}",
                callback_data=f"cancel_booking_{original_idx}"
            )])
        keyboard.append([InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, —è–∫–µ –±–∞–∂–∞—î—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏:", reply_markup=reply_markup)
        return CANCEL_PROMPT # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    elif text == "üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (–∞–¥–º—ñ–Ω—É)":
        if user_id == ADMIN_USER_ID:
            active_bookings = [b for b in bookings if b['status'] in ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ']]
            if not active_bookings:
                await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å.")
            else:
                await update.message.reply_text("–û—Å—å –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:")
                for i, b in enumerate(active_bookings, 1):
                    # –î–ª—è –∞–¥–º—ñ–Ω–∞, —è–∫—â–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –≤ –≥—Ä—É–ø—É, –º–æ–∂–ª–∏–≤–æ, –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∫–Ω–æ–ø–æ–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ç—É—Ç,
                    # –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è –≤ –æ—Å–æ–±–∏—Å—Ç–∏–π —á–∞—Ç –∞–¥–º—ñ–Ω–∞.
                    # –Ø–∫—â–æ —Ü–µ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ –∞–¥–º—ñ–Ω–∞, –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏, –∞–ª–µ —Ç–æ–¥—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ª–æ–≥—ñ–∫–∞,
                    # —â–æ–± –∫–Ω–æ–ø–∫–∏ –¥—ñ—è–ª–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞.
                    await update.message.reply_text(
                        f"üî¢ #{i}\n"
                        f"üìÖ –î–∞—Ç–∞: {b['date']}\n"
                        f"‚è∞ –ß–∞—Å: {b['time']}\n"
                        f"üè† –ö–∞–±—ñ–Ω–∫–∞: {b['cabin']}\n"
                        f"üë§ {b['name']} ({b['contact']})\n"
                        f"üë• –ì–æ—Å—Ç–µ–π: {b['guests']}\n"
                        f"üìå –°—Ç–∞—Ç—É—Å: {b['status']}"
                    )
            return CHOOSING_MAIN_ACTION
        else:
            await update.message.reply_text("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return CHOOSING_MAIN_ACTION
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
        return CHOOSING_MAIN_ACTION

async def book_date_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""
    user_id = update.message.from_user.id
    date_text = update.message.text

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏ —Ç–∞ —ó—ó –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—ñ (–Ω–µ —Ä–∞–Ω—ñ—à–µ —Å—å–æ–≥–æ–¥–Ω—ñ)
        booking_date = datetime.strptime(date_text, "%d.%m.%Y").date()
        today = datetime.now().date()
        if booking_date < today:
            await update.message.reply_text("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫ –Ω–∞ –º–∏–Ω—É–ª—É –¥–∞—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É –¥–∞—Ç—É.")
            return BOOK_DATE

        user_booking_data[user_id]['date'] = date_text

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ —á–∞—Å–æ–≤–∏–º–∏ —Å–ª–æ—Ç–∞–º–∏
        keyboard = []
        # –†–æ–∑–±–∏–≤–∞—î–º–æ —Å–ª–æ—Ç–∏ –Ω–∞ —Ä—è–¥–∏ –ø–æ 4 –∫–Ω–æ–ø–∫–∏
        for i in range(0, len(time_slots), 4):
            row = []
            for slot in time_slots[i:i+4]:
                row.append(InlineKeyboardButton(slot, callback_data=f"time_{slot}"))
            keyboard.append(row)

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:", reply_markup=reply_markup)
        return BOOK_TIME
    except ValueError:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 30.07.2025).")
        return BOOK_DATE

async def book_time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —á–∞—Å—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""
    query = update.callback_query
    await query.answer() # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback query

    user_id = query.from_user.id
    # –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –∑ callback_data (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "time_18:00")
    selected_time = query.data.split("_")[1]
    user_booking_data[user_id]['time'] = selected_time

    date = user_booking_data[user_id]['date']
    time = user_booking_data[user_id]['time']

    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞–π–Ω—è—Ç—ñ –∫–∞–±—ñ–Ω–∫–∏ –Ω–∞ –æ–±—Ä–∞–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å
    busy = [b['cabin'] for b in bookings if b['date'] == date and b['time'] == time and b['status'] in ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ']]
    available_cabins = [cabin for cabin in CABINS if cabin not in busy]

    if not available_cabins:
        await query.edit_message_text("–ù–∞ —Ü–µ–π —á–∞—Å —É—Å—ñ –∫–∞–±—ñ–Ω–∫–∏ –∑–∞–π–Ω—è—Ç—ñ. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —á–∞—Å –∞–±–æ –¥–∞—Ç—É.")
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≤–∏–±–æ—Ä—É —á–∞—Å—É –∞–±–æ –¥–∞—Ç–∏
        # –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ CHOOSING_MAIN_ACTION –∞–±–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É —á–∞—Å—É/–¥–∞—Ç–∏
        await query.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —á–∞—Å –∞–±–æ –¥–∞—Ç—É –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION

    await query.edit_message_text("–°–∫—ñ–ª—å–∫–∏ –æ—Å—ñ–±?")
    return GUESTS

async def guests_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥–æ—Å—Ç–µ–π."""
    user_id = update.message.from_user.id
    guests_text = update.message.text

    try:
        num_guests = int(guests_text)
        if num_guests <= 0:
            await update.message.reply_text("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ—Å—Ç–µ–π –º–∞—î –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —á–∏—Å–ª–æ–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å.")
            return GUESTS
        user_booking_data[user_id]['guests'] = num_guests
    except ValueError:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ—Å—Ç–µ–π —á–∏—Å–ª–æ–º.")
        return GUESTS

    date = user_booking_data[user_id]['date']
    time = user_booking_data[user_id]['time']

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞–π–Ω—è—Ç—ñ –∫–∞–±—ñ–Ω–∫–∏ (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ —Ö—Ç–æ—Å—å –∑–∞–±—Ä–æ–Ω—é–≤–∞–≤ –∑–∞ —Ü–µ–π —á–∞—Å)
    busy = [b['cabin'] for b in bookings if b['date'] == date and b['time'] == time and b['status'] in ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ']]
    available_cabins = [cabin for cabin in CABINS if cabin not in busy]

    if not available_cabins:
        await update.message.reply_text("–ù–∞ –∂–∞–ª—å, –ø–æ–∫–∏ –≤–∏ –≤–≤–æ–¥–∏–ª–∏ –¥–∞–Ω—ñ, –≤—Å—ñ –∫–∞–±—ñ–Ω–∫–∏ –Ω–∞ —Ü–µ–π —á–∞—Å —Å—Ç–∞–ª–∏ –∑–∞–π–Ω—è—Ç–∏–º–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —á–∞—Å –∞–±–æ –¥–∞—Ç—É.")
        await update.message.reply_text("–ü–æ–≤–µ—Ä—Ç–∞—é –≤–∞—Å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION

    keyboard = [[InlineKeyboardButton(cabin, callback_data=f"cabin_{cabin}")] for cabin in available_cabins]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –∞–±–æ –∑–æ–Ω—É:", reply_markup=reply_markup)
    return SELECT_CABIN

async def select_cabin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫–∞–±—ñ–Ω–∫–∏."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    selected_cabin = query.data.split("_")[1] # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –∫–∞–±—ñ–Ω–∫–∏ –∑ callback_data
    user_booking_data[user_id]['cabin'] = selected_cabin
    await query.edit_message_text("–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
    return CONTACT_NAME

async def contact_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—É."""
    user_id = update.message.from_user.id
    user_booking_data[user_id]['name'] = update.message.text
    await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, +380991234567)")
    return CONTACT_PHONE

async def contact_phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""
    user_id = update.message.from_user.id
    user_booking_data[user_id]['contact'] = update.message.text
    data = user_booking_data[user_id]

    booking = {
        'user_id': user_id,
        'name': data['name'],
        'date': data['date'],
        'time': data['time'],
        'guests': data['guests'],
        'cabin': data['cabin'],
        'contact': data['contact'],
        'status': '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
        'chat_id': update.message.chat_id # Chat ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –π–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    }
    bookings.append(booking)
    idx = len(bookings) - 1 # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è

    await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ! –ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ç–≤–æ—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")
    await update.message.reply_text("üì¨ –ß–µ–∫–∞—î–º–æ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"admin_confirm_{idx}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"admin_reject_{idx}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    try:
        await context.bot.send_message(chat_id=ADMIN_USER_ID, text=format_booking_msg(booking), reply_markup=reply_markup)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º " + ADMIN_PHONE)

    return ConversationHandler.END # –ó–∞–≤–µ—Ä—à—É—î–º–æ –¥—ñ–∞–ª–æ–≥ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è

async def admin_booking_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è)."""
    query = update.callback_query
    await query.answer()

    data = query.data
    action, idx_str = data.split("_", 1) # –†–æ–∑–±–∏–≤–∞—î–º–æ "admin_confirm_idx" –∞–±–æ "admin_reject_idx"
    action_type = action.split("_")[1] # "confirm" –∞–±–æ "reject"
    idx = int(idx_str)

    if not (0 <= idx < len(bookings)):
        await query.edit_message_text("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        return

    booking = bookings[idx]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥—ñ—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if query.from_user.id != ADMIN_USER_ID:
        await query.edit_message_text("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    if action_type == "confirm":
        booking['status'] = "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ"

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ (—è–∫—â–æ ADMIN_CHAT_ID - —Ü–µ –≥—Ä—É–ø–∞)
        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=(
                    f"‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ:\n\n"
                    f"–Ü–º'—è: {booking['name']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking['contact']}\n"
                    f"–î–∞—Ç–∞: {booking['date']}\n"
                    f"–ß–∞—Å: {booking['time']}\n"
                    f"–ö–∞–±—ñ–Ω–∫–∞: {booking['cabin']}\n"
                    f"–ì–æ—Å—Ç–µ–π: {booking['guests']}"
                )
            )
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É: {e}")

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        try:
            await context.bot.send_message(chat_id=booking['chat_id'], text="‚úÖ –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}")

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É, —â–æ–± –∫–Ω–æ–ø–∫–∏ –∑–Ω–∏–∫–ª–∏
        await query.edit_message_text(f"‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ:\n\n{format_booking_msg(booking)}")

    elif action_type == "reject":
        booking['status'] = "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ"

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        try:
            await context.bot.send_message(chat_id=booking['chat_id'], text="‚ùå –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}")

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É, —â–æ–± –∫–Ω–æ–ø–∫–∏ –∑–Ω–∏–∫–ª–∏
        await query.edit_message_text(f"‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ:\n\n{format_booking_msg(booking)}")

    # –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è, –º–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥
    return ConversationHandler.END

async def cancel_booking_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data

    if data == "back_to_main":
        await query.edit_message_text("–ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION

    action, idx_str = data.split("_", 1) # –û—á—ñ–∫—É—î–º–æ "cancel_booking_idx"
    idx = int(idx_str)

    if not (0 <= idx < len(bookings)):
        await query.edit_message_text("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return CHOOSING_MAIN_ACTION

    booking_to_cancel = bookings[idx]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    if booking_to_cancel['user_id'] != user_id:
        await query.edit_message_text("–í–∏ –º–æ–∂–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ª–∏—à–µ –≤–ª–∞—Å–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")
        return CHOOSING_MAIN_ACTION

    if booking_to_cancel['status'] in ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ']:
        booking_to_cancel['status'] = '–°–∫–∞—Å–æ–≤–∞–Ω–æ'
        await query.edit_message_text(f"‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ {booking_to_cancel['date']} –æ {booking_to_cancel['time']} —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        try:
            await context.bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {booking_to_cancel['name']} —Å–∫–∞—Å—É–≤–∞–≤ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ {booking_to_cancel['date']} –æ {booking_to_cancel['time']} (–ö–∞–±—ñ–Ω–∫–∞: {booking_to_cancel['cabin']})."
            )
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: {e}")
    else:
        await query.edit_message_text("–¶–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤–∂–µ –Ω–µ —î –∞–∫—Ç–∏–≤–Ω–∏–º.")

    await query.message.reply_text("–©–æ—Å—å —â–µ?", reply_markup=get_main_keyboard())
    return CHOOSING_MAIN_ACTION

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /cancel –¥–ª—è –≤–∏—Ö–æ–¥—É –∑ –±—É–¥—å-—è–∫–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É."""
    await update.message.reply_text("–î—ñ–∞–ª–æ–≥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
    return ConversationHandler.END

async def fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
    await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è /start.", reply_markup=get_main_keyboard())
    return CHOOSING_MAIN_ACTION # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Å—Ç–∞–Ω—É

# --- –û—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∏ ---

if __name__ == '__main__':
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ–∞–π–ª—ñ .env")
    if not ADMIN_USER_ID or not ADMIN_CHAT_ID:
        raise ValueError("ADMIN_USER_ID –∞–±–æ ADMIN_CHAT_ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ–∞–π–ª—ñ .env")


    app = ApplicationBuilder().token(TOKEN).build()

    # ConversationHandler –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥—ñ–∞–ª–æ–≥—ñ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_MAIN_ACTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu_choice),
            ],
            BOOK_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, book_date_handler)],
            BOOK_TIME: [CallbackQueryHandler(book_time_handler, pattern=r"^time_")],
            GUESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, guests_handler)],
            SELECT_CABIN: [CallbackQueryHandler(select_cabin_handler, pattern=r"^cabin_")],
            CONTACT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, contact_name_handler)],
            CONTACT_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, contact_phone_handler)],
            CANCEL_PROMPT: [CallbackQueryHandler(cancel_booking_callback, pattern=r"^(cancel_booking_|back_to_main)")],
        },
        fallbacks=[CommandHandler('cancel', cancel_conversation), MessageHandler(filters.ALL, fallback_handler)],
        allow_reentry=True, # –î–æ–∑–≤–æ–ª—è—î –ø–æ–≤—Ç–æ—Ä–Ω–∏–π –≤—Ö—ñ–¥ —É –¥—ñ–∞–ª–æ–≥
    )

    app.add_handler(conv_handler)
    # –û–∫—Ä–µ–º–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è callback-–∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    app.add_handler(CallbackQueryHandler(admin_booking_callback, pattern=r"^(admin_confirm_|admin_reject_)"))

    import asyncio
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    asyncio.run(app.run_polling())

