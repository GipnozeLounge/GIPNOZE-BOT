# python-telegram-bot v20.x
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters, CallbackQueryHandler
)
from datetime import datetime
import os
from dotenv import load_dotenv
import sqlite3
import logging

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É .env, —è–∫—â–æ –≤–æ–Ω–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ
load_dotenv()

# –°—Ç–∞–Ω–∏ –¥—ñ–∞–ª–æ–≥—É –¥–ª—è ConversationHandler
CHOOSING_MAIN_ACTION, BOOK_DATE, BOOK_TIME, GUESTS, SELECT_CABIN, CONTACT_NAME, CONTACT_PHONE, ADMIN_VIEW_DATE = range(8)

# –ù–æ–≤–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, –Ω–∞–¥–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
TOKEN = "8351072049:AAHuWeKXsg2kIz0CGVzctq1xjIfLT9JHRU"

# –ù–æ–≤—ñ –¥–∞–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_USER_ID = 6073809255
ADMIN_CHAT_ID = "@gipnoze_lounge_chat"
ADMIN_PHONE = "+380956232134"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
if not TOKEN:
    logging.critical("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ–∞–π–ª—ñ .env")
    raise ValueError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ–∞–π–ª—ñ .env")

# –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
DB_NAME = 'bookings.db'

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —á–∞—Å–æ–≤–∏—Ö —Å–ª–æ—Ç—ñ–≤ –∑ 17:00 –¥–æ 22:30 –≤–∫–ª—é—á–Ω–æ, –∑ –∫—Ä–æ–∫–æ–º 30 —Ö–≤–∏–ª–∏–Ω
time_slots = []
for h in range(17, 23): # –ì–æ–¥–∏–Ω–∏ –≤—ñ–¥ 17 –¥–æ 22
    for m in (0, 30): # –•–≤–∏–ª–∏–Ω–∏ 0 –∞–±–æ 30
        time_slots.append(f"{h:02d}:{m:02d}")

CABINS = [
    "–ö–∞–±—ñ–Ω–∫–∞ 1 (5-10 —á–æ–ª.)",
    "–ö–∞–±—ñ–Ω–∫–∞ 2 (–¥–æ 8 —á–æ–ª.)",
    "–ö–∞–±—ñ–Ω–∫–∞ 3 (–¥–æ 6 —á–æ–ª.)",
    "VIP Xbox X (–¥–æ 12 —á–æ–ª.)",
    "VIP PS5 (–¥–æ 12 —á–æ–ª.)",
    "–î–∏–≤–∞–Ω—á–∏–∫–∏ –Ω–∞ –±–∞—Ä—ñ (–¥–æ 6 —á–æ–ª.)",
    "–ë–∞—Ä–Ω–∞ —Å—Ç—ñ–π–∫–∞ (6 –º—ñ—Å—Ü—å)",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 1",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 2",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 3",
    "–õ—ñ—Ç–Ω—è —Ç–µ—Ä–∞—Å–∞ - —Å—Ç—ñ–ª 4",
    "–î–æ–¥–∞—Ç–∫–æ–≤–µ –º—ñ—Å—Ü–µ –Ω–∞ 3 —á–æ–ª."
]

# –¢–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_booking_data = {}

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö ---

def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–∞–∑—É –¥–∞–Ω–∏—Ö, —Å—Ç–≤–æ—Ä—é—é—á–∏ —Ç–∞–±–ª–∏—Ü—é 'bookings', —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î."""
    conn = None
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS bookings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                name TEXT NOT NULL,
                date TEXT NOT NULL,
                time TEXT NOT NULL,
                guests INTEGER NOT NULL,
                cabin TEXT NOT NULL,
                contact TEXT NOT NULL,
                status TEXT NOT NULL,
                chat_id INTEGER NOT NULL
            )
        ''')
        conn.commit()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.")
    except sqlite3.Error as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
    finally:
        if conn:
            conn.close()

def get_bookings_from_db(filters=None):
    """–û—Ç—Ä–∏–º—É—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó."""
    conn = None
    bookings_list = []
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        query = "SELECT id, user_id, name, date, time, guests, cabin, contact, status, chat_id FROM bookings"
        params = []
        where_clauses = []

        if filters:
            if 'user_id' in filters:
                where_clauses.append("user_id = ?")
                params.append(filters['user_id'])
            if 'status' in filters:
                if isinstance(filters['status'], list):
                    status_placeholders = ','.join(['?' for _ in filters['status']])
                    where_clauses.append(f"status IN ({status_placeholders})")
                    params.extend(filters['status'])
                else:
                    where_clauses.append("status = ?")
                    params.append(filters['status'])
            if 'date' in filters:
                where_clauses.append("date = ?")
                params.append(filters['date'])
            if 'time' in filters:
                where_clauses.append("time = ?")
                params.append(filters['time'])
            if 'cabin' in filters:
                where_clauses.append("cabin = ?")
                params.append(filters['cabin'])


        if where_clauses:
            query += " WHERE " + " AND ".join(where_clauses)

        cursor.execute(query, params)
        rows = cursor.fetchall()

        for row in rows:
            booking = {
                'id': row[0],
                'user_id': row[1],
                'name': row[2],
                'date': row[3],
                'time': row[4],
                'guests': row[5],
                'cabin': row[6],
                'contact': row[7],
                'status': row[8],
                'chat_id': row[9]
            }
            bookings_list.append(booking)
    except sqlite3.Error as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω—å –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
    finally:
        if conn:
            conn.close()
    return bookings_list

def add_booking_to_db(booking_data):
    """–î–æ–¥–∞—î –Ω–æ–≤–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
    conn = None
    booking_id = None
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO bookings (user_id, name, date, time, guests, cabin, contact, status, chat_id)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            booking_data['user_id'],
            booking_data['name'],
            booking_data['date'],
            booking_data['time'],
            booking_data['guests'],
            booking_data['cabin'],
            booking_data['contact'],
            booking_data['status'],
            booking_data['chat_id']
        ))
        booking_id = cursor.lastrowid
        conn.commit()
        logging.info(f"–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è {booking_id} –¥–æ–¥–∞–Ω–æ –¥–æ –ë–î.")
    except sqlite3.Error as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
    finally:
        if conn:
            conn.close()
    return booking_id

def update_booking_status_in_db(booking_id, new_status):
    """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∑–∞ ID."""
    conn = None
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE bookings SET status = ? WHERE id = ?
        ''', (new_status, booking_id))
        conn.commit()
        logging.info(f"–°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è {booking_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{new_status}'.")
    except sqlite3.Error as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è {booking_id}: {e}")
    finally:
        if conn:
            conn.close()

def get_booking_by_id(booking_id):
    """–û—Ç—Ä–∏–º—É—î –æ–¥–Ω–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–∞ –π–æ–≥–æ ID."""
    conn = None
    row = None
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT id, user_id, name, date, time, guests, cabin, contact, status, chat_id FROM bookings WHERE id = ?
        ''', (booking_id,))
        row = cursor.fetchone()
    except sqlite3.Error as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–∞ ID {booking_id}: {e}")
    finally:
        if conn:
            conn.close()

    if row:
        return {
            'id': row[0],
            'user_id': row[1],
            'name': row[2],
            'date': row[3],
            'time': row[4],
            'guests': row[5],
            'cabin': row[6],
            'contact': row[7],
            'status': row[8],
            'chat_id': row[9]
        }
    return None

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---

def format_booking_msg(booking):
    """–§–æ—Ä–º–∞—Ç—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏."""
    return (
        f"üìÖ –ù–æ–≤–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:\n"
        f"–Ü–º'—è: {booking['name']}\n"
        f"–î–∞—Ç–∞: {booking['date']}\n"
        f"–ß–∞—Å: {booking['time']}\n"
        f"–ì–æ—Å—Ç–µ–π: {booking['guests']}\n"
        f"–ú—ñ—Å—Ü–µ: {booking['cabin']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking['contact']}\n"
        f"–°—Ç–∞—Ç—É—Å: {booking['status']}"
    )

def get_main_keyboard():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É."""
    return ReplyKeyboardMarkup(
        [
            ["üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫", "üì∏ Instagram"],
            ["üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (–∞–¥–º—ñ–Ω—É)", "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º"]
        ],
        resize_keyboard=True
    )

# --- –§—É–Ω–∫—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤ –∫–∞–ª—å—è–Ω–Ω—ñ–π.\n–©–æ –±–∞–∂–∞—î—à –∑—Ä–æ–±–∏—Ç–∏?\n\n–î–ª—è –ø–∏—Ç–∞–Ω—å: " + ADMIN_PHONE,
        reply_markup=get_main_keyboard()
    )
    return CHOOSING_MAIN_ACTION

async def handle_main_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (ReplyKeyboardMarkup)."""
    text = update.message.text
    user_id = update.message.from_user.id

    if text == "üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫":
        user_booking_data[user_id] = {} # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
        await update.message.reply_text("–ù–∞ —è–∫—É –¥–∞—Ç—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 30.07.2025)")
        return BOOK_DATE
    elif text == "üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (–∞–¥–º—ñ–Ω—É)":
        if user_id == ADMIN_USER_ID:
            await update.message.reply_text("–ù–∞ —è–∫—É –¥–∞—Ç—É –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 30.07.2025)")
            return ADMIN_VIEW_DATE
        else:
            await update.message.reply_text("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_main_keyboard())
            return CHOOSING_MAIN_ACTION
    elif text == "üì∏ Instagram":
        instagram_url = "https://www.instagram.com/gipnoze_lounge?utm_source=ig_web_button_share_sheet&igsh=ZDNlZDc0MzIxNw=="
        await update.message.reply_text(f"–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É Instagram: {instagram_url}", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION
    elif text == "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º":
        await update.message.reply_text(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {ADMIN_PHONE}", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION

async def book_date_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""
    user_id = update.message.from_user.id
    date_text = update.message.text

    try:
        booking_date = datetime.strptime(date_text, "%d.%m.%Y").date()
        today = datetime.now().date()
        if booking_date < today:
            await update.message.reply_text("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫ –Ω–∞ –º–∏–Ω—É–ª—É –¥–∞—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É –¥–∞—Ç—É.")
            return BOOK_DATE

        user_booking_data[user_id]['date'] = date_text

        keyboard = []
        for i in range(0, len(time_slots), 4):
            row = []
            for slot in time_slots[i:i+4]:
                row.append(InlineKeyboardButton(slot, callback_data=f"time_{slot}"))
            keyboard.append(row)

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:", reply_markup=reply_markup)
        return BOOK_TIME
    except ValueError:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 30.07.2025).")
        return BOOK_DATE

async def book_time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —á–∞—Å—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    selected_time = query.data.split("_")[1]
    
    if 'date' not in user_booking_data.get(user_id, {}):
        await query.message.reply_text("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É.", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION

    user_booking_data[user_id]['time'] = selected_time

    # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–∞—Å–æ–º –Ω–∞ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await query.edit_message_text(f"–í–∏ –æ–±—Ä–∞–ª–∏ {selected_time}. –¢–µ–ø–µ—Ä, —Å–∫—ñ–ª—å–∫–∏ –≤–∞—Å –±—É–¥–µ?", reply_markup=None)
    return GUESTS

async def guests_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥–æ—Å—Ç–µ–π."""
    user_id = update.message.from_user.id
    guests_text = update.message.text

    try:
        num_guests = int(guests_text)
        if num_guests <= 0:
            await update.message.reply_text("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ—Å—Ç–µ–π –º–∞—î –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —á–∏—Å–ª–æ–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å.")
            return GUESTS
        user_booking_data[user_id]['guests'] = num_guests
    except (ValueError, TypeError):
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ—Å—Ç–µ–π —á–∏—Å–ª–æ–º.")
        return GUESTS

    date = user_booking_data[user_id]['date']
    time = user_booking_data[user_id]['time']

    busy = [b['cabin'] for b in get_bookings_from_db(filters={'date': date, 'time': time, 'status': ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ']})]
    available_cabins = [cabin for cabin in CABINS if cabin not in busy]

    if not available_cabins:
        await update.message.reply_text("–ù–∞ –∂–∞–ª—å, –Ω–∞ —Ü–µ–π —á–∞—Å —É—Å—ñ –∫–∞–±—ñ–Ω–∫–∏ –∑–∞–π–Ω—è—Ç—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —á–∞—Å –∞–±–æ –¥–∞—Ç—É.")
        await update.message.reply_text("–ü–æ–≤–µ—Ä—Ç–∞—é –≤–∞—Å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION

    keyboard = [[InlineKeyboardButton(cabin, callback_data=f"cabin_{cabin}")] for cabin in available_cabins]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –∞–±–æ –∑–æ–Ω—É:", reply_markup=reply_markup)
    return SELECT_CABIN

async def select_cabin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫–∞–±—ñ–Ω–∫–∏."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    selected_cabin = query.data.split("_")[1]
    
    if 'guests' not in user_booking_data.get(user_id, {}):
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫–∏
        await query.message.reply_text("–î–∞–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É.", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION

    user_booking_data[user_id]['cabin'] = selected_cabin
    await query.edit_message_text("–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
    return CONTACT_NAME

async def contact_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—É."""
    user_id = update.message.from_user.id
    user_booking_data[user_id]['name'] = update.message.text
    await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, +380991234567)")
    return CONTACT_PHONE

async def contact_phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""
    user_id = update.message.from_user.id
    user_data = user_booking_data.get(user_id)
    if not user_data or 'name' not in user_data:
        await update.message.reply_text("–î–∞–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–Ω–æ–≤—É.", reply_markup=get_main_keyboard())
        return ConversationHandler.END

    user_data['contact'] = update.message.text

    booking_to_save = {
        'user_id': user_id,
        'name': user_data['name'],
        'date': user_data['date'],
        'time': user_data['time'],
        'guests': user_data['guests'],
        'cabin': user_data['cabin'],
        'contact': user_data['contact'],
        'status': '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
        'chat_id': update.message.chat_id
    }
    
    booking_id = add_booking_to_db(booking_to_save)
    if booking_id:
        booking_to_save['id'] = booking_id

        await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ! –ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ç–≤–æ—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")
        await update.message.reply_text("üì¨ –ß–µ–∫–∞—î–º–æ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"admin_confirm_{booking_id}"),
                InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"admin_reject_{booking_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await context.bot.send_message(chat_id=ADMIN_USER_ID, text=format_booking_msg(booking_to_save), reply_markup=reply_markup)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É ({ADMIN_USER_ID}): {e}")
            await update.message.reply_text(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º {ADMIN_PHONE}.")
    else:
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    await update.message.reply_text("–©–æ—Å—å —â–µ?", reply_markup=get_main_keyboard())
    return ConversationHandler.END

async def admin_booking_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è)."""
    query = update.callback_query
    await query.answer()

    data = query.data
    parts = data.split("_")
    if len(parts) != 3 or parts[0] != "admin":
        await query.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.")
        return

    action_type = parts[1]
    try:
        booking_id = int(parts[2])
    except (ValueError, IndexError):
        await query.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–∏–π ID –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")
        return

    booking = get_booking_by_id(booking_id)

    if not booking:
        await query.edit_message_text("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        return

    if query.from_user.id != ADMIN_USER_ID:
        await query.edit_message_text("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    if booking['status'] not in ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è']:
        await query.edit_message_text(f"–¶—è –±—Ä–æ–Ω—å –≤–∂–µ '{booking['status']}'.")
        return

    if action_type == "confirm":
        update_booking_status_in_db(booking_id, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ")
        booking['status'] = "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ"

        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=(
                    f"‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ:\n\n"
                    f"–Ü–º'—è: {booking['name']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking['contact']}\n"
                    f"–î–∞—Ç–∞: {booking['date']}\n"
                    f"–ß–∞—Å: {booking['time']}\n"
                    f"–ö–∞–±—ñ–Ω–∫–∞: {booking['cabin']}\n"
                    f"–ì–æ—Å—Ç–µ–π: {booking['guests']}"
                )
            )
            logging.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –≥—Ä—É–ø—É: {ADMIN_CHAT_ID}")
        except Exception as e:
            logging.error(f"–ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É {ADMIN_CHAT_ID}: {e}")

        try:
            await context.bot.send_message(chat_id=booking['chat_id'], text="‚úÖ –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {booking['chat_id']} –ø—Ä–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {e}")

        await query.edit_message_text(f"‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ:\n\n{format_booking_msg(booking)}")

    elif action_type == "reject":
        update_booking_status_in_db(booking_id, "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ")
        booking['status'] = "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ"

        try:
            await context.bot.send_message(chat_id=booking['chat_id'], text="‚ùå –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {booking['chat_id']} –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {e}")

        await query.edit_message_text(f"‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ:\n\n{format_booking_msg(booking)}")

async def admin_view_date_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –±—Ä–æ–Ω—é–≤–∞–Ω—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    date_text = update.message.text

    try:
        datetime.strptime(date_text, "%d.%m.%Y").date()
        context.user_data['admin_view_date'] = date_text

        bookings_for_date = get_bookings_from_db(filters={'date': date_text, 'status': ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ']})

        if not bookings_for_date:
            await update.message.reply_text(f"–ù–∞ {date_text} –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å.", reply_markup=get_main_keyboard())
        else:
            await update.message.reply_text(f"–û—Å—å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ {date_text}:")
            for i, b in enumerate(bookings_for_date, 1):
                keyboard = [
                    [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ü—é –±—Ä–æ–Ω—å", callback_data=f"admin_force_cancel_{b['id']}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                    f"üî¢ #{i}\n"
                    f"üìÖ –î–∞—Ç–∞: {b['date']}\n"
                    f"‚è∞ –ß–∞—Å: {b['time']}\n"
                    f"üè† –ö–∞–±—ñ–Ω–∫–∞: {b['cabin']}\n"
                    f"üë§ {b['name']} ({b['contact']})\n"
                    f"üë• –ì–æ—Å—Ç–µ–π: {b['guests']}\n"
                    f"üìå –°—Ç–∞—Ç—É—Å: {b['status']}",
                    reply_markup=reply_markup
                )
            await update.message.reply_text("–©–æ—Å—å —â–µ?", reply_markup=get_main_keyboard())
        return CHOOSING_MAIN_ACTION
    except ValueError:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 30.07.2025).")
        return ADMIN_VIEW_DATE

async def admin_force_cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data
    
    if user_id != ADMIN_USER_ID:
        await query.edit_message_text("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    action, _, idx_str = data.split("_", 2)
    try:
        booking_id = int(idx_str)
    except (ValueError, IndexError):
        await query.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–∏–π ID –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")
        return

    booking_to_cancel = get_booking_by_id(booking_id)

    if not booking_to_cancel:
        await query.edit_message_text("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        return

    if booking_to_cancel['status'] in ['–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ']:
        update_booking_status_in_db(booking_id, '–°–∫–∞—Å–æ–≤–∞–Ω–æ (–∞–¥–º—ñ–Ω–æ–º)')
        booking_to_cancel['status'] = '–°–∫–∞—Å–æ–≤–∞–Ω–æ (–∞–¥–º—ñ–Ω–æ–º)'

        await query.edit_message_text(f"‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ {booking_to_cancel['date']} –æ {booking_to_cancel['time']} –¥–ª—è {booking_to_cancel['name']} —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

        try:
            await context.bot.send_message(
                chat_id=booking_to_cancel['chat_id'],
                text=f"‚ùå –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ {booking_to_cancel['date']} –æ {booking_to_cancel['time']} (–ö–∞–±—ñ–Ω–∫–∞: {booking_to_cancel['cabin']}) –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: {e}")
    else:
        await query.edit_message_text(f"–¶–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤–∂–µ –±—É–ª–æ {booking_to_cancel['status']}.")
    
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥."""
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í–∏–±–∞—á—Ç–µ, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –º–µ–Ω—é."
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    init_db()

    application = ApplicationBuilder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_MAIN_ACTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu_choice)
            ],
            BOOK_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, book_date_handler)],
            BOOK_TIME: [CallbackQueryHandler(book_time_handler, pattern="^time_")],
            GUESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, guests_handler)],
            SELECT_CABIN: [CallbackQueryHandler(select_cabin_handler, pattern="^cabin_")],
            CONTACT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, contact_name_handler)],
            CONTACT_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, contact_phone_handler)],
            ADMIN_VIEW_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_view_date_handler)]
        },
        fallbacks=[CommandHandler("start", start)]
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(admin_booking_callback, pattern="^admin_(confirm|reject)_"))
    application.add_handler(CallbackQueryHandler(admin_force_cancel_booking, pattern="^admin_force_cancel_"))
    application.add_handler(MessageHandler(filters.COMMAND, unknown))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
